import boto3
import os
import subprocess
import urllib.parse
import requests
from ruamel.yaml import YAML

PIPELINE_NAME = os.environ['PIPELINE_NAME']
CLUSTER_YML_PATH = os.environ['CLUSTER_YML_PATH']
REGION = os.getenv('AWS_REGION', 'us-east-1')
GITHUB_TOKEN = os.getenv('PAT_TOKEN')
GITHUB_REPOSITORY = os.getenv('GITHUB_REPOSITORY')  # e.g. user/repo
BRANCH_NAME = f"update-ami-{PIPELINE_NAME.lower()}"


def get_latest_available_ami(pipeline_name, region='us-east-1'):
    client = boto3.client('imagebuilder', region_name=region)
    account_id = boto3.client('sts').get_caller_identity()['Account']
    pipeline_arn = f'arn:aws:imagebuilder:{region}:{account_id}:image-pipeline/{pipeline_name}'

    all_images = []
    next_token = None
    while True:
        params = {'imagePipelineArn': pipeline_arn}
        if next_token:
            params['nextToken'] = next_token
        response = client.list_image_pipeline_images(**params)
        all_images.extend(response.get('imageSummaryList', []))
        next_token = response.get('nextToken')
        if not next_token:
            break

    sorted_images = sorted(
        all_images, key=lambda x: x['dateCreated'], reverse=True)
    for image in sorted_images:
        image_arn = image['arn']
        details = client.get_image(imageBuildVersionArn=image_arn)
        if details['image']['state']['status'] == 'AVAILABLE':
            return details['image']['outputResources']['amis'][0]['image']
    return None


def update_yaml_file_preserve_tags(path: str, ami_id: str):
    yaml_parser = YAML()
    yaml_parser.preserve_quotes = True
    updated_keys = []

    with open(path, 'r') as f:
        data = yaml_parser.load(f)

    for key in ['PROD_AMI', 'DEV_AMI']:
        if key in data and data[key] != ami_id:
            data[key] = ami_id
            updated_keys.append(key)

    with open(path, 'w') as f:
        yaml_parser.dump(data, f)

    print(f"Updated {path} with AMI: {ami_id}")
    print("Keys updated:" if updated_keys else "ℹ️ No keys needed to be updated.")
    for key in updated_keys:
        print(f"  - {key}")


def git_create_branch_and_commit(file_path, ami_id, branch_name):
    subprocess.run(['git', 'config', '--global', 'user.name',
                   'github-actions'], check=True)
    subprocess.run(['git', 'config', '--global', 'user.email',
                   'github-actions@github.com'], check=True)

    subprocess.run(['git', 'checkout', '-b', branch_name], check=True)
    subprocess.run(['git', 'add', file_path], check=True)

    result = subprocess.run(['git', 'diff', '--cached', '--quiet'])
    if result.returncode == 0:
        print("ℹ️ No changes to commit.")
        return False

    subprocess.run(
        ['git', 'commit', '-m', f'[NOJIRA]: Update AMI ID to {ami_id}'], check=True)
    repo_url = f"https://x-access-token:{urllib.parse.quote(GITHUB_TOKEN)}@github.com/{GITHUB_REPOSITORY}.git"
    subprocess.run(['git', 'push', repo_url, branch_name], check=True)
    return True


def create_pull_request(branch_name, ami_id):
    url = f"https://api.github.com/repos/{GITHUB_REPOSITORY}/pulls"
    headers = {
        "Authorization": f"Bearer {GITHUB_TOKEN}",
        "Accept": "application/vnd.github+json"
    }
    data = {
        "title": f"[NOJIRA] Update AMI ID to {ami_id}",
        "head": branch_name,
        "base": "main",
        "body": "This PR was auto-generated by the AMI updater workflow."
    }
    response = requests.post(url, json=data, headers=headers)
    if response.status_code == 201:
        pr_url = response.json()["html_url"]
        print(f"Pull request created: {pr_url}")
    else:
        print(
            f"Failed to create pull request: {response.status_code} {response.text}")


if __name__ == "__main__":
    ami_id = get_latest_available_ami(PIPELINE_NAME, REGION)
    if not ami_id:
        print("No AVAILABLE AMI found.")
        exit(1)

    update_yaml_file_preserve_tags(CLUSTER_YML_PATH, ami_id)
    committed = git_create_branch_and_commit(
        CLUSTER_YML_PATH, ami_id, BRANCH_NAME)
    if committed:
        create_pull_request(BRANCH_NAME, ami_id)
# this script is designed to update the AMI ID in a specified YAML file, commit the changes to a new branch, and create a pull request on GitHub. It uses AWS SDK for Python (boto3) to interact with AWS Image Builder and GitHub API for version control operations. Make sure to set the required environment variables before running the script.
